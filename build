#!/bin/bash
kernel_dir="${PWD}"
CCACHE=$(command -v ccache)
objdir="${kernel_dir}/out"
anykernel=$HOME/anykernel
builddir="${kernel_dir}/build"
ZIMAGE=$kernel_dir/out/arch/arm64/boot/Image
TC_DIR=$HOME/tc
CLANG_DIR=$HOME/tc/clang-r522817
export CONFIG_FILE="vayu_defconfig"
export ARCH="arm64"
export KBUILD_BUILD_HOST=resona
export KBUILD_BUILD_USER=root
export PATH="$CLANG_DIR/bin:$PATH"

if ! [ -d "$CLANG_DIR" ]; then
    echo "Toolchain not found! Cloning to $CLANG_DIR..."
    if ! git clone -q --depth=1 --single-branch https://android.googlesource.com/platform/prebuilts/clang/host/linux-x86/ -b master $TC_DIR; then
        echo "Cloning failed! Aborting..."
        exit 1
    fi
fi


# Colors
NC='\033[0m'
RED='\033[0;31m'
LRD='\033[1;31m'
LGR='\033[1;32m'

if [ "$VAYU_CONFIG_REGEN" = "true" ]; then
    echo -e ${LGR} "Regenerating defconfig"
    make ARCH=arm64 O=out vayu_defconfig
    cp out/.config arch/arm64/configs/vayu_defconfig
else
    echo  -e ${RED} "Not regenerating config"
fi

if [ "$BUILD_WITH_KSU" = "true" ]; then
    echo -e ${LGR} "BUILD_WITH_KSU is true. Applying KSU patch and running setup..."
    kernel_name="Perfignite-KernelSUNext-vayu"
    zip_name="$kernel_name-$(date +"%d%m%Y-%H%M").zip"

    # Grab patch file
    curl https://raw.githubusercontent.com/grepfox/kernel_xiaomi_vayu/refs/heads/android-v/ksu.patch > ksu.patch

    # Apply the patch
    git am ksu.patch

    # Run setup script from remote
    curl -LSs "https://raw.githubusercontent.com/rifsxd/KernelSU-Next/next/kernel/setup.sh" | bash -

else
    kernel_name="Perfignite-vayu"
    zip_name="$kernel_name-$(date +"%d%m%Y-%H%M").zip"

    echo  -e ${RED} "BUILD_WITH_KSU is not true. Skipping KSU setup."
fi

make_defconfig()
{
    START=$(date +"%s")
    echo -e ${LGR} "        Generating Defconfig   ${NC}"
    make -s ARCH=${ARCH} O=${objdir} ${CONFIG_FILE} -j$(nproc --all)
}

compile()
{
    cd ${kernel_dir}
    echo -e ${LGR} "        Compiling kernel    ${NC}"
    make -j$(nproc --all) \
    O=out \
    ARCH=${ARCH}\
    CC="ccache clang" \
    CLANG_TRIPLE="aarch64-linux-gnu-" \
    CROSS_COMPILE="aarch64-linux-gnu-" \
    CROSS_COMPILE_ARM32="arm-linux-gnueabi-" \
    LLVM=1 \
    LLVM_IAS=1
}

completion()
{
    cd ${objdir}
    COMPILED_IMAGE=arch/arm64/boot/Image
    COMPILED_DTBO=arch/arm64/boot/dtbo.img
    if [[ -f ${COMPILED_IMAGE} && ${COMPILED_DTBO} ]]; then

        git clone -q https://github.com/grepfox/AnyKernel3 -b vayu $anykernel

        mv -f $ZIMAGE ${COMPILED_DTBO} $anykernel

        cd $anykernel
        find . -name "*.zip" -type f
        find . -name "*.zip" -type f -delete
        zip -r AnyKernel.zip *
        mv AnyKernel.zip $zip_name
        mv $anykernel/$zip_name $HOME/Documents/$zip_name
        rm -rf $anykernel
        END=$(date +"%s")
        DIFF=$(($END - $START))
        echo -e ${LGR} "         Kernel complied successfully!   ✅     ${NC}"
        exit 0
    else
        echo -e ${RED} "         Build Failed    ❌     ${NC}"
        exit 1
    fi
}
make_defconfig
compile
completion
cd ${kernel_dir}

if [ "$BUILD_WITH_KSU" = "true" ]; then
    echo -e ${RED} "Cleaning up KSU patch...  ${NC}"
    rm -rf KernelSU-Next
    git add . && git commit -m "ksu changes"
    git reset --hard HEAD~1
fi